///
//  Generated code. Do not modify.
//  source: test
///
// ignore_for_file: non_constant_identifier_names,library_prefixes,unused_import

import 'dart:async' as $async;

import 'package:grpc/grpc.dart' as $grpc;
import 'test.pb.dart';
export 'test.pb.dart';

class TestClient extends $grpc.Client {
  static final _$unary = new $grpc.ClientMethod<Input, Output>(
      '/Test/Unary',
      (Input value) => value.writeToBuffer(),
      (List<int> value) => new Output.fromBuffer(value));
  static final _$clientStreaming = new $grpc.ClientMethod<Input, Output>(
      '/Test/ClientStreaming',
      (Input value) => value.writeToBuffer(),
      (List<int> value) => new Output.fromBuffer(value));
  static final _$serverStreaming = new $grpc.ClientMethod<Input, Output>(
      '/Test/ServerStreaming',
      (Input value) => value.writeToBuffer(),
      (List<int> value) => new Output.fromBuffer(value));
  static final _$bidirectional = new $grpc.ClientMethod<Input, Output>(
      '/Test/Bidirectional',
      (Input value) => value.writeToBuffer(),
      (List<int> value) => new Output.fromBuffer(value));

  TestClient($grpc.ClientChannel channel, {$grpc.CallOptions options})
      : super(channel, options: options);

  $grpc.ResponseFuture<Output> unary(Input request,
      {$grpc.CallOptions options}) {
    final call = $createCall(_$unary, new $async.Stream.fromIterable([request]),
        options: options);
    return new $grpc.ResponseFuture(call);
  }

  $grpc.ResponseFuture<Output> clientStreaming($async.Stream<Input> request,
      {$grpc.CallOptions options}) {
    final call = $createCall(_$clientStreaming, request, options: options);
    return new $grpc.ResponseFuture(call);
  }

  $grpc.ResponseStream<Output> serverStreaming(Input request,
      {$grpc.CallOptions options}) {
    final call = $createCall(
        _$serverStreaming, new $async.Stream.fromIterable([request]),
        options: options);
    return new $grpc.ResponseStream(call);
  }

  $grpc.ResponseStream<Output> bidirectional($async.Stream<Input> request,
      {$grpc.CallOptions options}) {
    final call = $createCall(_$bidirectional, request, options: options);
    return new $grpc.ResponseStream(call);
  }
}

abstract class TestServiceBase extends $grpc.Service {
  String get $name => 'Test';

  TestServiceBase() {
    $addMethod(new $grpc.ServiceMethod<Input, Output>(
        'Unary',
        unary_Pre,
        false,
        false,
        (List<int> value) => new Input.fromBuffer(value),
        (Output value) => value.writeToBuffer()));
    $addMethod(new $grpc.ServiceMethod<Input, Output>(
        'ClientStreaming',
        clientStreaming,
        true,
        false,
        (List<int> value) => new Input.fromBuffer(value),
        (Output value) => value.writeToBuffer()));
    $addMethod(new $grpc.ServiceMethod<Input, Output>(
        'ServerStreaming',
        serverStreaming_Pre,
        false,
        true,
        (List<int> value) => new Input.fromBuffer(value),
        (Output value) => value.writeToBuffer()));
    $addMethod(new $grpc.ServiceMethod<Input, Output>(
        'Bidirectional',
        bidirectional,
        true,
        true,
        (List<int> value) => new Input.fromBuffer(value),
        (Output value) => value.writeToBuffer()));
  }

  $async.Future<Output> unary_Pre(
      $grpc.ServiceCall call, $async.Future request) async {
    return unary(call, await request);
  }

  $async.Stream<Output> serverStreaming_Pre(
      $grpc.ServiceCall call, $async.Future request) async* {
    yield* serverStreaming(call, (await request) as Input);
  }

  $async.Future<Output> unary($grpc.ServiceCall call, Input request);
  $async.Future<Output> clientStreaming(
      $grpc.ServiceCall call, $async.Stream<Input> request);
  $async.Stream<Output> serverStreaming($grpc.ServiceCall call, Input request);
  $async.Stream<Output> bidirectional(
      $grpc.ServiceCall call, $async.Stream<Input> request);
}
